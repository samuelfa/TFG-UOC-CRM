services:
    # default configuration for services in *this* file
    _defaults:
        bind:
            $rootFolder: '%kernel.project_dir%'
            $domain: '%domain%'
            $databaseNamePrefix: '%database_name.prefix%'
            $domainTemplate: '%domain_template%'

        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Infrastructure\Symfony\Controller\:
        resource: '../src/Infrastructure/Symfony/Controller'
        tags: ['controller.service_arguments']

    _instanceof:
        App\Application\TransactionalService:
            tags:
                - { name: 'app.transactional_service', priority: 20 }

    # Validators

    App\Infrastructure\Symfony\Validator\Constraints\CSRFValidator:
        arguments:
            $manager: '@security.csrf.token_manager'
        tags:
            - { name: 'validator.constraint_validator' }

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Domain\Company\CompanyRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\CompanyRepository'
    App\Domain\Company\CloneCustomerRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\CloneCustomerRepository'
    App\Domain\User\UserRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\UserRepository'

    App\Domain\Company\CompanyEventDispatcher: '@App\Infrastructure\Symfony\Event\Company\CompanyEventDispatcher'

    App\Infrastructure\Symfony\Event\TransactionalServiceHandler:
        arguments:
            $services: !tagged_iterator app.transactional_service

    # Services

    App\Infrastructure\Symfony\Event\UserLoggedSubscriber:
        tags:
            - { name: kernel.event_listener, event: kernel.controller, priority: 0 }

    App\Infrastructure\Symfony\Event\CustomerNamespaceSubscriber:
        tags:
            - { name: kernel.event_listener, event: kernel.controller, priority: 10 }

    # Session handler

    Redis:
        class: Redis
        calls:
            - method: connect
              arguments:
                  - '%env(REDIS_HOST)%'
                  - '%env(int:REDIS_PORT)%'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
        arguments:
            - '@Redis'